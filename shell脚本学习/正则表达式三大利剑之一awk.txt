awk(三位作者名字的首字母，Aho, Weinberger, Kernighan)报告生成器，格式化文本输出。
awk中定义的变量，引用时前不加"$"
awk的格式：
        awk [options] ‘program’ var=value file…
        awk [options] -f programfile var=value file…
        awk [options] 'BEGIN{ action;… } pattern{ action;… } END{action;… }' file ...
     awk通常组成：
         BEGIN语句块、能够使用模式匹配的通用语句块、END语句块 program通常是在单引号或双引号中
    常用选项
        -F:指定分割符，默认为空白分隔符
        -v:定义变量，每个变量前添加-v
    工作原理
        第一步：执行BEGIN{action;… }语句块中的语句 第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{action;…}语句块，它逐行扫描
文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。
        第三步：当读至输入流末尾时，执行END{action;…}语句块
        BEGIN:语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中        		
        END:语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息
汇总都是在END语句块中完成，它也是一个可选语句块
		pattern:语句块中的通用命令是最重要的部分，也是可选的。如果没有提供pattern语句块，则默
认执行{ print }，即打印每一个读取到的行， awk读取的每一行都会执行该语句块      
       action动作
           print格式:print item1,item2
           (1)用逗号隔开，输入结果以空格分割          (2)item的值可以是字符串(用双引号引起来)、变量、当前记录(行)的字段、数值、awk表达式
           (3)如果不写item默认打印$0

printf(print+format)--------------格式化输出
          格式：printf "格式"，item1，item2.....
                       (1) 必须指定FORMAT
                       (2) 不会自动换行，需要显式给出换行控制符， \n
					   (3)FORMAT中需要分别为后面每个item指定格式符
          格式符：与item一一对应
              %c:显示字符的ASCII码
              %s:字符
              %d %i：数字十进制格式
              %f:浮点型
              %e %E:科学计数法表示
              %u:显示无符号整数
              %g %G：科学计数法表示或者浮点型表示
              %%：显示%本身
修饰符：%#[.#]：第一个#控制显示的宽度，第二个#表示小数点后的精度，如%3.1f
		-：左对齐(默认右对齐)，如：%-15s
		+：显示数值的正负号，如：%+d
awk的算术操作符：x+y、x-y、x*y、x/y、x^y、x%y，没有符号的操作符是字符连接
		-：转换为负数
		+：转换为数值
awk的赋值操作符：=、+=、-=、*=、/=、%=、^=
     比较操作符：>、>=、<、<=、!=、==
	 模式匹配符：~：左边是否和右边匹配或包含
			     !~：左边和右边是否不匹配
				例：awk '$0 !~ /^root/' /etc/passwd	#匹配以root开头的行
	 逻辑操作符：&&、||、!。例：awk -F: '$3>0 && $3<500{print $1}' passwd
	 条件表达式：selector?if-true-expression:if-false-expression
     selector为条件，若为真则执行？后面的语句，如果为假则执行：后面的语句
awk输出行的范围：startline,endline或/pat1/,/pat2/
例：awk -F: '/^root/,/^mysql/{print $1}' passwd#输以root和mysql开头之间的

[root@vs1 ~]# id
uid=0(root) gid=0(root) groups=0(root)
[root@vs1 ~]# id|awk -F'[()]'  '{print $2}'	#以括号为分隔符，用"[()]"
root
##提取两个文件第一列相同的行
awk -F',' 'NR==FNR{a[$1]=$0;next}NR>FNR{if($1 in a)print $0"\n"a[$1]}' 1.log 2.log

awk 'NR==FNR{a[$1]++}NR>FNR&&a[$1]>1' 111.txt 111.txt

awk 'a[$1]++==1' 

cat 111.txt | awk -F '[:|]' '{print $2}' > 111.txt

##awk 按某个位置的字符分隔的方法
awk -F ":" '{ for(i=1;i<=3;i++) printf("%s:",$i)}'
awk -F':' '{print $1 ":" $2 ":" $3; print $4}'
awk -F':' '{print $1 ":" $2 ":" $3; for(i=1;i<=3;i++)$i=""; print}'

##awk打印用户和密码
cat test.log  |awk -F '[ ]+' '{print $1 "   " $2}'

##排序显示重复项目
cat test.log |awk -F '[ ]+' '{print $1}'| sort | uniq -c | sort -nr

#awk -F '\t'来表示分隔符，比如
awk -F '\t' '{print $1}' file1.txt 

##多个空格分隔的方法
awk -F '[ ]+' '{print $9}'
ls -lh /etc/sysconfig/network-scripts/ifcfg-* | awk -F '[ ]+' '{print $9}'

##指定分隔符既可以为空格，又可以为冒号，那么处理将会变得简单。可以使用正则表达式来指定多个分隔符，格式为 -F'[空格:]+' 如下
awk -F'[ :]+' '{print $NF"\t"$(NF-2)}'  file1.txt 


1、awk '/101/'    file      输出file中包含101的行。 
   awk '/101/,/105/'  file 	输出file中101到105之间的内容
   awk '$1 == 5'    file 
   awk '$1 == "CT"'    file 
   awk '$1 * $2 >100 '   file  
   awk '$2 >5 && $2<=15'  file


2、awk '{print NR,NF,$1,$NF,}' file     显示文件file的当前记录号、域数和每一行的第一个和最后一个域。 
   awk '/101/ {print $1,$2 + 10}' file       显示文件file的匹配行的第一、二个域加10。 
   awk '/101/ {print $1$2}'  file 
   awk '/101/ {print $1 $2}' file       显示文件file的匹配行的第一、二个域，但显示时域中间没有分隔符。


3、df | awk '$4>1000000 '         通过管道符获得输入，如：显示第4个域满足条件的行。


4、awk -F "|" '{print $1}'   file         按照新的分隔符“|”进行操作。 
   awk  'BEGIN { FS="[: \t|]" } 
   {print $1,$2,$3}'       file         通过设置输入分隔符（FS="[: \t|]"）修改输入分隔符。 

   Sep="|" 
   awk -F $Sep '{print $1}'  file   按照环境变量Sep的值做为分隔符。    
   awk -F '[ :\t|]' '{print $1}' file   按照正则表达式的值做为分隔符，这里代表空格、:、TAB、|同时做为分隔符。 
   awk -F '[][]'    '{print $1}' file   按照正则表达式的值做为分隔符，这里代表[、]


5、awk -f awkfile    file         通过文件awkfile的内容依次进行控制。 
   cat awkfile 
/101/{print "\047 Hello! \047"}    --遇到匹配行以后打印 ' Hello! '.  \047代表单引号。 
{print $1,$2}                      --因为没有模式控制，打印每一行的前两个域。


6、awk '$1 ~ /101/ {print $1}' file         显示文件中第一个域匹配101的行（记录）。


7、awk   'BEGIN { OFS="%"} 
   {print $1,$2}'  file           通过设置输出分隔符（OFS="%"）修改输出格式。


8、awk   'BEGIN { max=100 ;print "max=" max}             BEGIN 表示在处理任意行之前进行的操作。 
   {max=($1 >max ?$1:max); print $1,"Now max is "max}' file           取得文件第一个域的最大值。 
   （表达式1?表达式2:表达式3 相当于： 
   if (表达式1) 
       表达式2 
   else 
       表达式3 
   awk '{print ($1>4 ? "high "$1: "low "$1)}' file 


9、awk '$1 * $2 >100 {print $1}' file         显示文件中第一个域匹配101的行（记录）。


10、awk '{$1 == 'Chi' {$3 = 'China'; print}' file        找到匹配行后先将第3个域替换后再显示该行（记录）。 
    awk '{$7 %= 3; print $7}'  file           将第7域被3除，并将余数赋给第7域再打印。


11、awk '/tom/ {wage=$2+$3; printf wage}' file          找到匹配行后为变量wage赋值并打印该变量。


12、awk '/tom/ {count++;}  
         END {print "tom was found "count" times"}' file            END表示在所有输入行处理完后进行处理。


13、awk 'gsub(/\$/,"");gsub(/,/,""); cost+=$4; 
         END {print "The total is $" cost>"filename"}'    file             gsub函数用空串替换$和,再将结果输出到filename中。 
    1 2 3 $1,200.00 
    1 2 3 $2,300.00 
    1 2 3 $4,000.00 

    awk '{gsub(/\$/,"");gsub(/,/,""); 
    if ($4>1000&&$4<2000) c1+=$4; 
    else if ($4>2000&&$4<3000) c2+=$4; 
    else if ($4>3000&&$4<4000) c3+=$4; 
    else c4+=$4; } 
    END {printf  "c1=[%d];c2=[%d];c3=[%d];c4=[%d]\n",c1,c2,c3,c4}"' file 
    通过if和else if完成条件语句 

    awk '{gsub(/\$/,"");gsub(/,/,""); 
    if ($4>3000&&$4<4000) exit; 
    else c4+=$4; } 
    END {printf  "c1=[%d];c2=[%d];c3=[%d];c4=[%d]\n",c1,c2,c3,c4}"' file 
    通过exit在某条件时退出，但是仍执行END操作。 
    awk '{gsub(/\$/,"");gsub(/,/,""); 
    if ($4>3000) next; 
    else c4+=$4; } 
    END {printf  "c4=[%d]\n",c4}"' file 
    通过next在某条件时跳过该行，对下一行执行操作。 


14、awk '{ print FILENAME,$0 }' file1 file2 file3>fileall              把file1、file2、file3的文件内容全部写到fileall中，格式为 
    打印文件并前置文件名。


15、awk ' $1!=previous { close(previous); previous=$1 }    
    {print substr($0,index($0," ") +1)>$1}' fileall           把合并后的文件重新分拆为3个文件。并与原文件一致。


16、awk 'BEGIN {"date"|getline d; print d}'         通过管道把date的执行结果送给getline，并赋给变量d，然后打印。 


17、awk 'BEGIN {system("echo \"Input your name:\\c\""); getline d;print "\nYour name is",d,"\b!\n"}' 
    通过getline命令交互输入name，并显示出来。 
    awk 'BEGIN {FS=":"; while(getline< "/etc/passwd" >0) { if($1~"050[0-9]_") print $1}}' 
    打印/etc/passwd文件中用户名包含050x_的用户名。 

18、awk '{ i=1;while(i<NF) {print NF,$i;i++}}' file 通过while语句实现循环。 
awk '{ for(i=1;i<NF;i++) {print NF,$i}}'   file 通过for语句实现循环。     
    type file|awk -F "/" ' 
    { for(i=1;i<NF;i++) 
    { if(i==NF-1) { printf "%s",$i } 
    else { printf "%s/",$i } }}'               显示一个文件的全路径。 
    用for和if显示日期 
    awk  'BEGIN { 
for(j=1;j<=12;j++) 
{ flag=0; 
  printf "\n%d月份\n",j; 
        for(i=1;i<=31;i++) 
        { 
        if (j==2&&i>28) flag=1; 
        if ((j==4||j==6||j==9||j==11)&&i>30) flag=1; 
        if (flag==0) {printf "%02d%02d ",j,i} 
        } 
} 
}'

1、判断磁盘使用率若超过70则打印磁盘名：
df -h|awk -F% '/^\/dev\/sd/{print $1}'|awk '{if ($NF>70){print $1}}'

2、awk中的for语句：语法： for(expr1;expr2;expr3) statement
for(variable assignment;condition;iteration process) {for-body}
例：awk 'BEGIN{total=0;for(i=0;i<10001;i++){total+=i}{print total}}'
注：对于同一个for循环shell完成耗时是awk的十倍不止！

3、awk过滤掉重复的行：awk '!a[$0]++' file

4、awk常见的重要应用：
##查看每个tcp状态的连接数：
netstat -atn|awk '/^tcp/{state[$NF]++}END{for(i in state){print i,state[i]}}'
##查看每个IP地址访问http的链接数：
awk ‘{IP[$1]++}{for(i in ip){print i,ip[i]}}' /var/log/httpd/access_log

5、awk产生随机数函数――――rand()返回一个0到1之间的数，必须结合srand()使用
例：awk 'BEGIN{srand();for(i=1;i<=10;i++)print int(rand()*100)}
   awk输出字符串长度：lengtn(s)：返回指定字符串s的长度

6、awk中调用shell命令：system("COMMAND")
例：awk 'BEGIN{system("hostname")}'		#返回当前主机的名称

7、awk的next语句:提前结束对本行的处理直接进入下一行处理
例：awk -F: {if($3%2!=0)next;{print $1,$3}}' passwd

练习题：
统计/etc/fstab文件中每个文件系统类型出现的次数：
awk '/^[^#]/{type[$3]++}END{for(i in type){print i,type[i]}}' /etc/fstab
统计/etc/fstab文件中每个单词出现的次数：
awk '{for(i=1;i<=NF;i++){count[$i]++}}END{for(i in count){print i,count[i]}}' /etc/fstab

参考链接：http://www.178linux.com/47995